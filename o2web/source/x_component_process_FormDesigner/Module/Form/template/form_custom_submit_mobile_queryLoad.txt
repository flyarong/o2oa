MWF.xDesktop.requireApp("process.Xform", "Org", null, false);

this.define("loadProcessorMobile", function( defaultRoute ){
    if( !this.processor ){
        this.processor = new O2ProcessorMobile(this);
    }
    if( !defaultRoute && this.defaultRoute ){
        defaultRoute = this.defaultRoute;
    }
    if( this.defaultRoute )this.defaultRoute = "";
    this.processor.load( defaultRoute );
});

this.define("popupProcessorMobile", function( defaultRoute ){
    if( !defaultRoute && this.defaultRoute ){
        defaultRoute = this.defaultRoute;
    }
    if( this.defaultRoute )this.defaultRoute = "";
    if( !this.processor ){
        this.processor = new O2ProcessorMobile(this);
    }
    this.processor.load( defaultRoute );
});

window.O2ProcessorMobile = new Class({
    Implements: [Events],
    initialize: function (macro) {

        debugger;

        this.macro = macro;
        this.app = macro.form.app;
        this.form = this.app.appForm;
        this.task = this.form.businessData.task;
        this.appContentNode = $(document.body); //this.app.content;

        this.initConstant();
        this.getCss();
        this.getAllNode();

        // this.loadCss();

    },
    initConstant: function () {
        this.DefaultDecisionOpinionName = "其它"; //默认的决策组，如果当前节点有决策组，但是某些决策没有落在决策组中，那么使用默认决策组
    },
    load: function ( defaultRoute ) {
        this.defaultRoute = defaultRoute || "";
        if ( this.status === "show" || this.status === "loading" ){

        }else if (this.status === "closed" ) {
            this.node.show();

            //强制刷新路由
            //this.refreshRoute();

            // this.positionSeted = false; //重新设置位置
            // this.setSize( this.getCurrentRouteOrgList().length );
            var currentRoute = this.selectedRoute ? this.selectedRoute.retrieve("route") : "";
            if( currentRoute )this.showOrgsByRoute(currentRoute);
            this.status = "show";
        } else {
            this.status = "loading";
            this.container = new Element("div").inject(this.appContentNode);
            this.node.setStyles({
                "width" : "100%",
                "position" : "absolute",
                "z-index" : "101"
            })

            this.loadContent();

            this.setEvents();
            this.node.inject(this.container);
            this.status = "show";
        }
        if( this.inputTextarea ){
            var opinion = this.getData("inputTextarea");
            if( !opinion || this.lastAutoOpinion === opinion){
                var op = this.form.getOpinion();
                if( op && op.opinion ){
                    this.lastAutoOpinion = op.opinion;
                    this.setData( "inputTextarea", op.opinion );
                }
            }
        }
        if(  defaultRoute ){
            var flag = true;

            if( this.routeGroupNodeList && this.routeGroupNodeList.length ){
                 for( var i=0; i<this.routeGroupNodeList.length; i++ ){
                      var routeGroupNode = this.routeGroupNodeList[i];
                      var routeList = routeGroupNode.retrieve( "routeList" );
                      var matchRoutes = routeList.filter(function(r){ return r.id === defaultRoute || r.name === defaultRoute; }.bind(this));
                      if( matchRoutes.length ){
                           this.selectRouteGroup(routeGroupNode);
                           break;
                      }
                 }
            }

            if( this.selectedRoute ){
                if( this.selectedRoute.retrieve("route") === defaultRoute || this.selectedRoute.retrieve("routeName") === defaultRoute)flag = false;
            }
            if( flag && this.routeNodeMap && this.routeNodeMap[defaultRoute]){
                this.selectRoute( this.routeNodeMap[defaultRoute] );
            }
        }
    },
    refreshRoute: function (defaultRoute) {
        if(defaultRoute){
            this.defaultRoute = defaultRoute;
        }else if(this.selectedRoute){
            this.defaultRoute  = this.selectedRoute.retrieve("route");
        }

        this.routeGroupObject = null;
        this.selectedRouteGroup = null;
        if( this.routeGroupArea )this.routeGroupArea.empty();
        this.getRouteGroupList();

        if(this.routeSelectorArea)this.routeSelectorArea.empty();

        var orgLength = this.getMaxOrgLength();
        if (orgLength === 0) { //流程选人数量为0
            if (this.orgsTile) {
                this.orgsTile.destroy();
                this.orgsTile = null;
            }
            if (this.orgsArea) {
                this.orgsArea.destroy();
                this.orgsArea = null;
            }
        }

        if (this.hasDecisionOpinion) { //有决策组
            this.setRouteGroupList();
        } else {  //没有决策组
            if (this.routeGroupTitle) {
                this.routeGroupTitle.destroy();
                this.routeGroupTitle = null;
            }
            if (this.routeGroupArea) {
                this.routeGroupArea.destroy();
                this.routeGroupArea = null;
            }
            // this.routeSelectorArea.setStyles( this.css.routeSelectorArea );
            // if( this.inputOpinionNodeTd && this.selectIdeaNodeTd ){
            //     this.inputOpinionNodeTd.set( "width", orgLength < 2 ? "60%" : "50%" );
            // }
            this.setRouteList();
        }
    },
    loadContent: function () {
        this.getRouteGroupList();

        var orgLength = this.getMaxOrgLength();
        if (orgLength === 0) { //流程选人数量为0
            if (this.orgsTile) {
                this.orgsTile.destroy();
                this.orgsTile = null;
            }
            if (this.orgsArea) {
                this.orgsArea.destroy();
                this.orgsArea = null;
            }
        }

        this.setOpinion(); //意见

        if (this.hasDecisionOpinion) { //有决策组
            this.setRouteGroupList();
        } else {  //没有决策组
            if (this.routeGroupTitle) {
                this.routeGroupTitle.destroy();
                this.routeGroupTitle = null;
            }
            if (this.routeGroupArea) {
                this.routeGroupArea.destroy();
                this.routeGroupArea = null;
            }
            // this.routeSelectorArea.setStyles( this.css.routeSelectorArea );
            // if( this.inputOpinionNodeTd && this.selectIdeaNodeTd ){
            //     this.inputOpinionNodeTd.set( "width", orgLength < 2 ? "60%" : "50%" );
            // }
            this.setRouteList();
        }
    },

    getAllNode: function () {
        this.node = this.getNode("submitNode");

        this.buttonNode = this.getNode("submitButtonNode");

        this.contentWrapNode = this.getNode("submitContentWrapNode");
        this.contentNode = this.getNode("submitContentNode");
        this.contentInnerNode = this.getNode("submitContentInnerNode");

        this.routeGroupTitle = this.getNode("routeGroupTitle");
        this.routeGroupArea = this.getNode("routeGroupArea");

        this.routeSelectorTitle = this.getNode("routeSelectorTitle");
        this.routeSelectorArea = this.getNode("routeSelectorArea");

        this.selectIdeaAreaNode = this.getNode("selectIdeaAreaNode");

        this.inputOpinionNode = this.getNode("inputOpinionNode");
        this.inputTextarea = this.getNode("inputTextarea");

        this.handwritingAction = this.getNode("handwritingAction");

        this.orgsTile = this.getNode("orgsTile");
        this.orgsArea = this.getNode("orgsArea");

        this.buttonsArea = this.getNode("submitButtonNode");
        this.okButton = this.getNode("okButton");
        this.cancelButton = this.getNode("cancelButton");
    },
    setEvents: function () {
        if (this.cancelButton) {
            this.cancelButton.addEvent("click", function () {
                this.close();
                this.fireEvent("cancel");
            }.bind(this));
        }
        if (this.okButton) {
            this.okButton.addEvent("click", function (ev) {
                this.submit(ev)
            }.bind(this));
        }
    },
    getNode: function (name) {
        if (this.macro.form.get(name)) {
            return this.macro.form.get(name).node;
        }
        if (this.form.allForName[name]) {
            return this.form.allForName[name].node;
        }
    },
    setData: function (name, value) {
        var item = this.macro.form.get(name);
        return item ? item.setData(value) : null;
    },
    getData: function (name) {
        var item = this.macro.form.get(name);
        return item ? item.getData() : null;
    },
    getRouteConfigList: function () { //获取当前待办的所有路由设置
        if(this.routeConfigList)return this.routeConfigList;
        if (this.form && this.form.businessData && this.form.businessData.task && this.form.businessData.task.routeNameDisable){
            this.routeConfigList = [{
                "id": o2.uuid(),
                "asyncSupported": false,
                "soleDirect": false,
                "name": "继续流转",
                "alias": "",
                "selectConfigList": []
            }];
            return this.routeConfigList;
        }
        if( this.form && this.form.businessData && this.form.businessData.routeList ){
            this.form.businessData.routeList.sort( function(a, b){
                var aIdx = parseInt(a.orderNumber || "9999999");
                var bIdx = parseInt(b.orderNumber || "9999999");
                return aIdx - bIdx;
            }.bind(this));
            this.form.businessData.routeList.each( function(d){
                d.selectConfigList = JSON.parse(d.selectConfig || "[]");
            }.bind(this));
            this.routeConfigList = this.form.businessData.routeList;
        }
        if (!this.routeConfigList) {
            o2.Actions.get("x_processplatform_assemble_surface").listRoute({"valueList": this.task.routeList}, function (json) {
                json.data.sort(function(a, b){
                    var aIdx = parseInt(a.orderNumber || "9999999");
                    var bIdx = parseInt(b.orderNumber || "9999999");
                    return aIdx - bIdx;
                }.bind(this));
                json.data.each(function (d) {
                    d.selectConfigList = JSON.parse(d.selectConfig || "[]");
                }.bind(this));
                this.routeConfigList = json.data;
            }.bind(this), null, false);
        }
        return this.routeConfigList;
    },
    getRouteConfig: function (routeId) { //根据某个ID获取路由设置
        var routeList = this.getRouteConfigList();
        for (var i = 0; i < routeList.length; i++) {
            if (routeList[i].id === routeId) {
                return routeList[i];
            }
        }
    },
    getMaxOrgLength: function () { //获取当前待办下可能的最多选人组件个数
        var routeList = this.getRouteConfigList();
        var length = 0;
        routeList.each(function (route) {
            length = Math.max(length, route.selectConfigList.length);
        }.bind(this));
        return length;
    },
    getOrgConfig: function (routeId) { //获取人员选择配置
        var routeList = this.getRouteConfigList();
        for (var i = 0; i < routeList.length; i++) {
            if (routeList[i].id === routeId) {
                return routeList[i].selectConfigList;
            }
        }
    },
    getVisableOrgConfig: function (routeId) {
        var selectConfigList = this.getOrgConfig(routeId);
        var list = [];
        (selectConfigList || []).each(function (config) {
            if (!this.isOrgHidden(config)) {
                list.push(config);
            }
        }.bind(this));
        return list;
    },
    isOrgHidden: function (d) {
        if (d.hiddenScript && d.hiddenScript.code) { //如果隐藏路由，返回
            var hidden = this.form.Macro.exec(d.hiddenScript.code, this);
            if (hidden && hidden.toString() === "true") return true;
        }
        return false;
    },
    getCurrentRouteSelectorList: function () {  //获取当前路由的人员选择器对象
        var selectorList = [];
        var currentRoute = this.selectedRoute ? this.selectedRoute.retrieve("route") : "";
        var orgList = this.orgItemsObject[currentRoute];
        if (!orgList) return [];
        orgList.each(function (org) {
            if (org.selector && org.selector.selector) {
                selectorList.push(org.selector.selector);
            }
        }.bind(this))
        return selectorList;
    },
    getCurrentRouteOrgList: function () { //获取当前路由的org对象
        if( !this.orgItemsObject )return [];
        var currentRoute = this.selectedRoute ? this.selectedRoute.retrieve("route") : "";
        var orgList = this.orgItemsObject[currentRoute];
        return orgList || [];
    },
    getSelectorSelectedData: function (filedName) {  //获取人员选择器选择的值
        var data = [];
        var orgList = this.getCurrentRouteOrgList();
        for (var i = 0; i < orgList.length; i++) {
            var org = orgList[i];
            if (org.json.name === filedName) {
                var selector = org.selector.selector;
                selector.selectedItems.each(function (item) {
                    data.push(item.data)
                })
            }
        }
        return data;
    },
    getMarginY: function (node) {
        return (node.getStyle("margin-top").toInt() || 0) +
            (node.getStyle("margin-bottom").toInt() || 0);
        // (node.getStyle("padding-top").toInt() || 0 ) +
        // (node.getStyle("padding-bottom").toInt() || 0 )+
        // (node.getStyle("border-top-width").toInt() || 0 ) +
        // (node.getStyle("border-bottom-width").toInt() || 0 );
    },
    setSize: function (currentOrgLength) {
        var lines = ((currentOrgLength + 1) / 2).toInt();

        if (lines > 0) {
            this.showOrgsArea();
        } else {
            this.hideOrgsArea();
        }

        if (this.buttonsArea) {
            var bodySize = this.appContentNode.getSize();
            var nodeHeight = bodySize.y - this.getMarginY(this.node);
            this.node.setStyles({
                "overflow-y": "hidden",
                "height": nodeHeight
            });
            var buttonsAreaSize = this.buttonsArea.getSize();
            this.contentNode.setStyles({
                "height": nodeHeight - buttonsAreaSize.y - this.getMarginY(this.buttonsArea) - this.getMarginY(this.contentNode),
                "overflow-y": "auto"
            })
        }

        this.fireEvent("resize");
    },
    showOrgsArea: function () {
        if (this.orgsTile) this.orgsTile.show();
        if (this.orgsArea) this.orgsArea.show();
    },
    hideOrgsArea: function () {
        if (this.orgsTile) this.orgsTile.hide();
        if (this.orgsArea) this.orgsArea.hide();
    },

    /*决策和决策组相关      开始*/
    getRouteGroupList: function () {  //获取决策组并格式化成对象
        if (this.routeGroupObject) return this.routeGroupObject;
        this.routeGroupObject = {};
        this.routeGroupNameList = [];
        this.hasDecisionOpinion = false;
        var routeList = this.getRouteConfigList();
        routeList.each(function (route, i) {

            if (route.hiddenScriptText && this.form && this.form.Macro) { //如果隐藏路由，返回
                if (this.form.Macro.exec(route.hiddenScriptText, this).toString() === "true") return;
            }

            if (route.displayNameScriptText && this.form && this.form.Macro) { //如果有显示名称公式
                route.displayName = this.form.Macro.exec(route.displayNameScriptText, this);
            } else {
                route.displayName = route.name;
            }

            if (route.decisionOpinion) { //决策组名称
                this.hasDecisionOpinion = true;
                var decisionOpinionList = route.decisionOpinion.split("#");
                decisionOpinionList.each(function (decisionOption) {
                    this.routeGroupNameList.combine([decisionOption]);
                    var d = this.splitByStartNumber(decisionOption);
                    if (!this.routeGroupObject[d.name]) this.routeGroupObject[d.name] = [];
                    this.routeGroupObject[d.name].push(route);
                }.bind(this))
            } else {
                var defaultName = this.DefaultDecisionOpinionName;
                this.routeGroupNameList.combine([defaultName]);
                if (!this.routeGroupObject[defaultName]) this.routeGroupObject[defaultName] = [];
                this.routeGroupObject[defaultName].push(route);
            }
        }.bind(this));
        return this.routeGroupObject;
    },
    splitByStartNumber: function (str) {
        var obj = {
            name: "",
            order: ""
        };
        for (var i = 0; i < str.length; i++) {
            if (parseInt(str.substr(i, 1)).toString() !== "NaN") {
                obj.order = obj.order + str.substr(i, 1);
            } else {
                obj.name = str.substr(i, str.length);
                break;
            }
        }
        return obj;
    },
    setRouteGroupList: function () {  //排序并创建决策组DOM对象
        var _self = this;

        this.routeGroupNodeMap = {};
        this.routeGroupNodeList = [];

        //根据决策组的排序号进行排序
        var keys = this.routeGroupNameList;
        keys.sort(function (a, b) {
            var aIdx = parseInt(this.splitByStartNumber(a).order || "9999999");
            var bIdx = parseInt(this.splitByStartNumber(b).order || "9999999");
            return aIdx - bIdx;
        }.bind(this));

        var list = [];
        keys.each(function (k) {
            list.push(this.splitByStartNumber(k).name)
        }.bind(this));

        debugger;
        var flag = true;
        var matchRoutes = [];
        list.each(function (routeGroupName) {
            var routeList = this.routeGroupObject[routeGroupName];
            var routeGroupNode = new Element("div", {
                "styles": this.css.routeGroupNode,
                "text": routeGroupName
            }).inject(this.routeGroupArea);
            routeGroupNode.store("routeList", routeList);
            routeGroupNode.store("routeGroupName", routeGroupName);

            this.routeGroupNodeMap[routeGroupName] = routeGroupNode;
            this.routeGroupNodeList.push( routeGroupNode );

            routeGroupNode.addEvents({
                "mouseover": function (e) {
                    _self.overRouteGroup(this);
                },
                "mouseout": function (e) {
                    _self.outRouteGroup(this);
                },
                "click": function (e) {
                    _self.selectRouteGroup(this);
                }
            });

            if (keys.length === 1) {  //如果决策组只有1个，则默认选中
                this.selectRouteGroup(routeGroupNode);
                flag = false;
            }else if( matchRoutes.length === 0 && this.defaultRoute ){
                matchRoutes = routeList.filter(function(r){ return r.id === this.defaultRoute || r.name === this.defaultRoute; }.bind(this));
                if( matchRoutes.length ){
                    this.selectRouteGroup(routeGroupNode);
                }
                flag = false;
            }
        }.bind(this));
        if(flag){
            this.setSize(0);
        }
    },
    overRouteGroup: function (node) {
        if (this.selectedRouteGroup) {
            if (this.selectedRouteGroup.get("text") != node.get("text")) {
                node.setStyles(this.css.routeGroupNode_over);
            }
        } else {
            node.setStyles(this.css.routeGroupNode_over);
        }
    },
    outRouteGroup: function (node) {
        if (this.selectedRouteGroup) {
            if (this.selectedRouteGroup.get("text") != node.get("text")) {
                node.setStyles(this.css.routeGroupNode);
            }
        } else {
            node.setStyles(this.css.routeGroupNode);
        }
    },
    selectRouteGroup: function (node) {  //选中决策组执行...
        if (this.selectedRouteGroup) {
            if (this.selectedRouteGroup.get("text") != node.get("text")) {
                this.selectedRouteGroup.setStyles(this.css.routeGroupNode);
                //this.selectedRouteGroup.removeClass("mainColor_bg");

                this.selectedRouteGroup = node;
                this.selectedRouteGroup.setStyles(this.css.routeGroupNode_selected);
                //this.selectedRouteGroup.addClass("mainColor_bg");

                var routeList = this.selectedRouteGroup.retrieve("routeList");
                this.setRouteList(routeList);

            } else {

            }
        } else {
            this.selectedRouteGroup = node;
            node.setStyles(this.css.routeGroupNode_selected);

            var routeList = this.selectedRouteGroup.retrieve("routeList");
            this.setRouteList(routeList);
        }
        this.routeGroupArea.setStyle("background-color", "#FFF");
    },
    setRouteList: function (routeList) { //创建决策对象
        var _self = this;
        this.routeSelectorArea.empty();
        this.selectedRoute = null;

        this.routeNodeMap = {};

        if (!routeList) routeList = this.getRouteConfigList();
        var isSelected = false;
        var isSelectedDefault = false;

        routeList = routeList.filter(function (route, i) {
            if (route.hiddenScriptText && this.form && this.form.Macro) {  //如果隐藏路由，返回
                if (this.form.Macro.exec(route.hiddenScriptText, this).toString() === "true") return false;
            }
            return true;
        }.bind(this));

        routeList.each(function (route, i) {
            var routeName = route.name;
            if (route.displayNameScriptText && this.form && this.form.Macro) { //如果有显示名称公式
                routeName = this.form.Macro.exec(route.displayNameScriptText, this);
            }
            var routeNode = new Element("div", {
                "styles": this.css.routeNode,
                "text": routeName
            }).inject(this.routeSelectorArea);
            routeNode.store("route", route.id);
            routeNode.store("routeName", route.name);

            this.routeNodeMap[route.id] = routeNode;
            this.routeNodeMap[route.name] = routeNode;

            routeNode.addEvents({
                "mouseover": function (e) {
                    _self.overRoute(this);
                },
                "mouseout": function (e) {
                    _self.outRoute(this);
                },
                "click": function (e) {
                    _self.selectRoute(this);
                }
            });

            if( route.id === this.defaultRoute || route.name === this.defaultRoute) {
                this.selectRoute(routeNode);
                isSelected = true;
                isSelectedDefault = true;
            }else if ( !isSelectedDefault && (routeList.length == 1 || route.sole )) { //sole表示优先路由
                this.selectRoute(routeNode);
                isSelected = true;
            }

        }.bind(this));
        if (!isSelected) {
            this.setSize(0);
        }
    },
    overRoute: function (node) {
        if (this.selectedRoute) {
            if (this.selectedRoute.get("text") != node.get("text")) {
                node.setStyles(this.css.routeNode_over);
                node.addClass("lightColor_bg");
            }
        } else {
            node.setStyles(this.css.routeNode_over);
            node.addClass("lightColor_bg");
        }
    },
    outRoute: function (node) {
        if (this.selectedRoute) {
            if (this.selectedRoute.get("text") != node.get("text")) {
                node.setStyles(this.css.routeNode);
                node.removeClass("lightColor_bg");
            }
        } else {
            node.setStyles(this.css.routeNode);
            node.removeClass("lightColor_bg");
        }
    },
    getDefaultOpinion: function( node ){
        var routeId = node.retrieve("route");
        var routeDate = this.getRouteConfig( routeId );
        return routeDate.opinion || "";
    },
    selectRouteByName: function( route ){

    },
    selectRoute: function (node) {
        if (this.selectedRoute) {
            if (this.selectedRoute.get("text") != node.get("text")) {
                this.selectedRoute.setStyles(this.css.routeNode);
                this.selectedRoute.removeClass("mainColor_bg");

                if( this.getData("inputTextarea") === this.lastDefaultOpinion ||
                    this.getData("inputTextarea") === ""
                ){
                    this.lastDefaultOpinion = this.getDefaultOpinion(node) || "";
                    this.setData( "inputTextarea", this.lastDefaultOpinion );
                }

                this.selectedRoute = node;
                node.setStyles(this.css.routeNode_selected);
                node.addClass("mainColor_bg");
                node.removeClass("lightColor_bg");

            } else {
                if ( this.getData("inputTextarea") === this.getDefaultOpinion(this.selectedRoute)) {
                    this.lastDefaultOpinion = "";
                    this.setData( "inputTextarea", "");
                }

                this.selectedRoute.setStyles(this.css.routeNode);
                this.selectedRoute.addClass("lightColor_bg");
                this.selectedRoute.removeClass("mainColor_bg");

                this.selectedRoute = null;
            }
        } else {
            if (this.getData("inputTextarea") === "" || this.getData("inputTextarea") === this.lastDefaultOpinion ) {
                this.lastDefaultOpinion = this.getDefaultOpinion(node) || "";
                if (this.lastDefaultOpinion) this.setData( "inputTextarea", this.lastDefaultOpinion);
            }

            this.selectedRoute = node;
            node.setStyles(this.css.routeNode_selected);
            node.addClass("mainColor_bg");
            node.removeClass("lightColor_bg");
        }
        this.routeSelectorArea.setStyle("background-color", "#FFF");

        this.loadOrgs(this.selectedRoute ? this.selectedRoute.retrieve("route") : "");

        if (this.form.data.json.events && this.form.data.json.events.afterSelectRoute) {
            this.form.Macro.exec(this.form.data.json.events.afterSelectRoute.code, node);
        }

    },
    /*决策和决策组相关      结束*/

    setOpinion: function () {
        if (!this.inputTextarea) return;
        if (this.handwritingAction) this.handwritingAction.addEvent("click", function () {
            window.setTimeout( function(){
                this.handwriting();
            }.bind(this), 100 )
        }.bind(this));

        if (this.selectIdeaAreaNode) {
            MWF.require("MWF.widget.UUID", function () {
                MWF.UD.getDataJson("idea", function (json) {
                    if (json) {
                        if (json.ideas) {
                            this.setIdeaList(json.ideas);
                        }
                    } else {
                        MWF.UD.getPublicData("idea", function (pjson) {
                            if (pjson) {
                                if (pjson.ideas) {
                                    this.setIdeaList(pjson.ideas);
                                }
                            }
                        }.bind(this));
                    }
                }.bind(this));
            }.bind(this));
        }

    },

    audioRecord: function () {
        if (!this.audioRecordNode) this.createAudioRecord();
        this.audioRecordNode.show();
        this.audioRecordNode.position({
            "relativeTo": this.options.mediaNode || this.node,
            "position": "center",
            "edge": "center"
        });

        MWF.require("MWF.widget.AudioRecorder", function () {
            this.audioRecorder = new MWF.widget.AudioRecorder(this.audioRecordNode, {
                "onSave": function (blobFile) {
                    this.soundFile = blobFile;
                    this.audioRecordNode.hide();
                }.bind(this),
                "onCancel": function () {
                    this.soundFile = null;
                    this.audioRecordNode.hide();
                }.bind(this)
            }, null);
        }.bind(this));
    },
    createAudioRecord: function () {
        this.audioRecordNode = new Element("div", {"styles": this.css.handwritingNode}).inject(this.node, "after");
        var size = (this.options.mediaNode || this.node).getSize();
        var zidx = this.node.getStyle("z-index");
        this.audioRecordNode.setStyles({
            "height": "" + size.y + "px",
            "width": "" + size.x + "px",
            "z-index": zidx + 1
        });
    },

    handwriting: function () {
        if (!this.handwritingNode) this.createHandwriting();
        if(this.handwritingNodeMask)this.handwritingNodeMask.show();
        this.handwritingNode.show();
        this.handwritingNode.setStyles({
            "top": "0px",
            "left": "0px"
        });
    },
    createHandwriting: function () {
        this.handwritingNodeMask = new Element("div.handwritingMask", {"styles": this.css.handwritingMask}).inject(this.node);

        this.handwritingNode = new Element("div.handwritingNode", {"styles": this.css.handwritingNode}).inject(this.node, "after");
        //var size = (this.options.mediaNode || this.node).getSize();
        //var y = size.y;
        //var x = size.x;
        //兼容以前的默认高宽

        debugger;

        var bodySize = $(document.body).getSize();
        var x = bodySize.x;
        var y = bodySize.y;

        var zidx = this.node.getStyle("z-index");
        this.handwritingNode.setStyles({
            "height": "" + y + "px",
            "width": "" + x + "px",
            "z-index": zidx + 1
        });
        this.handwritingNode.addEvent('touchmove' , function(e){
            e.preventDefault();
        });
        this.handwritingNode.setStyles({
            "top": "0px",
            "left": "0px"
        });
        this.handwritingAreaNode = new Element("div", {"styles": this.css.handwritingAreaNode}).inject(this.handwritingNode);
        // this.handwritingActionNode = new Element("div", {
        //     "styles": this.css.handwritingActionNode,
        //     "text": MWF.xApplication.process.Work.LP.saveWrite
        // }).inject(this.handwritingNode);
        // var h = this.handwritingActionNode.getSize().y + this.handwritingActionNode.getStyle("margin-top").toInt() + this.handwritingActionNode.getStyle("margin-bottom").toInt();
        // h = y - h;
        // this.handwritingAreaNode.setStyle("height", "" + h + "px");
        this.handwritingAreaNode.setStyle("height", "" + y + "px");

        MWF.require("MWF.widget.Tablet", function () {
            var handWritingOptions = {
                "style": "default",
                "contentWidth": 0,
                "contentHeight": 0,
                "onSave": function (base64code, base64Image, imageFile) {
                    this.handwritingFile = imageFile;
                    this.handwritingNode.hide();
                    this.handwritingNodeMask.hide();
                    // this.page.get("div_image").node.set("src",base64Image);

                }.bind(this),
                "onCancel": function () {
                    this.handwritingFile = null;
                    this.handwritingNode.hide();
                    this.handwritingNodeMask.hide();
                }.bind(this)
            };
            handWritingOptions.tools = [
                "undo",
                "redo", "|",
                "reset", "|",
                "size",
                "cancel"
            ]
            this.tablet = new MWF.widget.Tablet(this.handwritingAreaNode, handWritingOptions, null);
            this.tablet.load();
        }.bind(this));

        // this.handwritingActionNode.addEvent("click", function () {
        //     //this.handwritingNode.hide();
        //     if (this.tablet) this.tablet.save();
        // }.bind(this));
    },

    setIdeaList: function (ideas) {
        var _self = this;
        ideas.each(function (idea) {
            if (!idea) return;
            new Element("div", {
                "styles": this.css.selectIdeaItemNode,
                "text": idea,
                "events": {
                    "click": function () {
                        if (!_self.getData("inputTextarea")) {
                            _self.setData("inputTextarea", this.get("text"));
                        } else {
                            _self.setData("inputTextarea", _self.getData("inputTextarea") + ", " + this.get("text"));
                        }
                    },
                    "dblclick": function () {
                        if (!_self.getData("inputTextarea")) {
                            _self.setData("inputTextarea", this.get("text"));
                        } else {
                            _self.setData("inputTextarea", _self.getData("inputTextarea") + ", " + this.get("text"));
                        }
                    },
                    "mouseover": function () {
                        this.setStyles(_self.css.selectIdeaItemNode_over);
                    },
                    "mouseout": function () {
                        this.setStyles(_self.css.selectIdeaItemNode);
                    }
                }
            }).inject(this.selectIdeaAreaNode);
        }.bind(this));
    },
    submit: function (ev) {
        if (this.hasDecisionOpinion && !this.selectedRouteGroup) {
            this.routeGroupArea.setStyle("background-color", "#ffe9e9");
            MWF.xDesktop.notice(
                "error",
                {"x": "center", "y": "top"},
                "请先选择决策组",
                this.routeGroupArea,
                null,  //{"x": 0, "y": 30}
                {"closeOnBoxClick": true, "closeOnBodyClick": true, "fixed": true, "delayClose": 6000}
            );
            return false;
        }

        if (!this.selectedRoute) {
            this.routeSelectorArea.setStyle("background-color", "#ffe9e9");
            new mBox.Notice({
                type: "error",
                position: {"x": "center", "y": "top"},
                move: false,
                target: this.routeSelectorArea,
                delayClose: 6000,
                content: "请先选择决策"
            });
            return false;
        }
        var routeName = this.selectedRoute.retrieve("routeName") || this.selectedRoute.get("text");
        var opinion = this.getData("inputTextarea");
        if (opinion === MWF.xApplication.process.Work.LP.inputText) opinion = "";
        var medias = [];
        if (this.handwritingFile) medias.push(this.handwritingFile);
        if (this.soundFile) medias.push(this.soundFile);
        if (this.videoFile) medias.push(this.videoFile);

        var currentRouteId = this.selectedRoute.retrieve("route");
        var routeConfig = this.getRouteConfig(currentRouteId);
        if (!opinion && medias.length === 0) {
            if (routeConfig.opinionRequired == true) {
                this.inputTextarea.setStyle("background-color", "#ffe9e9");
                new mBox.Notice({
                    type: "error",
                    position: {"x": "center", "y": "top"},
                    move: false,
                    target: this.inputTextarea,
                    delayClose: 6000,
                    content: "请填写意见"
                });
                return false;
            }
        }

        if (routeConfig.validationScriptText) {
            var validation = this.form.Macro.exec(routeConfig.validationScriptText, this);
            if (!validation || validation.toString() !== "true") {
                if (typeOf(validation) === "string") {
                    new mBox.Notice({
                        type: "error",
                        position: {"x": "center", "y": "top"},
                        move: false,
                        target: this.node,
                        delayClose: 6000,
                        content: validation
                    });
                    return false;
                } else {
                    //"路由校验失败"
                    new mBox.Notice({
                        type: "error",
                        position: {"x": "center", "y": "top"},
                        move: false,
                        target: this.node,
                        delayClose: 6000,
                        content: "路由校验失败"
                    });
                    return false;
                }
            }
        }

        //var array = [routeName, opinion, medias];
        //this.node.mask({
        //    "inject": {"where": "bottom", "target": this.node},
        //    "destroyOnHide": true,
        //    "style": {
        //        "background-color": "#999",
        //        "opacity": 0.3,
        //        "z-index":600
        //    }
        //});
        //this.fireEvent("submit", array );

        var appendTaskOrgItem;
        if (routeConfig.type === "appendTask" && routeConfig.appendTaskIdentityType === "select") {
            if (!this.orgItems || this.orgItems.length === 0) {
                new mBox.Notice({
                    type: "error",
                    position: {"x": "center", "y": "top"},
                    move: false,
                    target: this.orgsArea,
                    delayClose: 6000,
                    content: "没有配置转交人，请联系管理员" //"没有配置转交人，请联系管理员"
                });
                return false;
            } else {
                appendTaskOrgItem = this.orgItems[0]
            }
        }

        if (!this.saveOrgs()) return false;

        //this.saveOrgsWithCheckEmpower( function(){
        var appandTaskIdentityList;
        if (appendTaskOrgItem) {
            appandTaskIdentityList = appendTaskOrgItem.getData();
            if (!appandTaskIdentityList || appandTaskIdentityList.length === 0) {
                new mBox.Notice({
                    type: "error",
                    position: {"x": "center", "y": "top"},
                    move: false,
                    target: this.orgsArea,
                    delayClose: 6000,
                    content: "请选择转交人"
                });
                return;
            }
        }

        if (routeConfig.validationScriptText) {
            var validation = this.form.Macro.exec(routeConfig.validationScriptText, this);
            if (!validation || validation.toString() !== "true") {
                if (typeOf(validation) === "string") {
                    MWF.xDesktop.notice(
                        "error",
                        {"x": "center", "y": "center"},
                        validation,
                        this.node,
                        {"x": 0, "y": 30},
                        {"closeOnBoxClick": true, "closeOnBodyClick": true, "fixed": true, "delayClose": 6000}
                    );
                    return false;
                } else {
                    //"路由校验失败"
                    MWF.xDesktop.notice(
                        "error",
                        {"x": "center", "y": "center"},
                        "路由校验失败",
                        this.node,
                        {"x": 0, "y": 30},
                        {"closeOnBoxClick": true, "closeOnBodyClick": true, "fixed": true, "delayClose": 6000}
                    );
                    return false;
                }
            }
        }

        this.node.mask({
            "inject": {"where": "bottom", "target": this.node},
            "destroyOnHide": true,
            "style": {
                "background-color": "#999",
                "opacity": 0.3,
                "z-index": 600
            }
        });

        // var array = [ routeName, opinion, medias, appandTaskIdentityList, this.orgItems, function(){
        //     if(appendTaskOrgItem)appendTaskOrgItem.setData([]);
        // }];

        var op = this.form.getOpinion();
        var mds = op.medias;

        if (!medias || !medias.length) {
            medias = mds;
        } else {
            medias = medias.concat(mds)
        }

        this.form.submitWork(routeName, opinion, medias, function () {
            this.close();
        }.bind(this), this, null, appandTaskIdentityList, this.orgItems, function () {
            if (appendTaskOrgItem) appendTaskOrgItem.setData([]);
            this.setData("inputTextarea", "");
        }.bind(this));

        // this.fireEvent("submit", array );
    },

    close: function () {
        this.node.setStyle("display", "none");
        this.status = "closed";
    },
    destroy: function () {
        // this.node.empty();
        // delete this.task;
        // delete this.node;
        // delete this.routeSelectorTile;
        // delete this.routeSelectorArea;
        // delete this.routeOpinionTile;
        // delete this.routeOpinionArea;
        // delete this.buttonsArea;
        // delete this.inputOpinionNode;
        // delete this.inputTextarea;
        // delete this.cancelButton;
        // delete this.okButton;
    },
    loadOrgs: function (route) {
        if (!this.form || !route) {
            this.hideOrgsArea();
            return;
        } else {
            this.showOrgsArea();
        }
        if (!this.orgTableObject) this.orgTableObject = {};
        if (!this.orgItemsObject) this.orgItemsObject = {};
        if (!this.orgItemsMap) this.orgItemsMap = {};
        var isLoaded = false;
        for (var key in this.orgTableObject) {
            if (route === key) {
                isLoaded = true;
            } else {
                this.orgTableObject[key].hide();
            }
        }
        if (isLoaded) {
            this.showOrgs_mobile(route);
        } else {
            this.createOrgs_mobile(route)
        }
    },
    showOrgs_mobile: function (route) {
        this.orgItemMap = this.orgItemsMap[route] || {};
        var dataVisable = this.getVisableOrgConfig(route);
        if (dataVisable.length) {
            if (this.isSameArray(Object.keys(this.orgItemMap), dataVisable.map(function (d) {
                return d.name
            }))) {
                this.orgTableObject[route].show();
                this.orgItems = this.orgItemsObject[route] || [];
                this.setSize(dataVisable.length);
            } else {
                this.loadOrgTable_mobile(route);
            }
        } else {
            if(this.orgsArea)this.orgsArea.hide();
            this.orgItemMap = {};
            this.orgItems = [];
            this.setSize(0);
        }
    },
    createOrgs_mobile: function (route) {
        var dataVisable = this.getVisableOrgConfig(route);
        if (dataVisable.length) {
            this.loadOrgTable_mobile(route);
        } else {
            this.setSize(dataVisable.length);
            this.orgItemMap = {};
            this.orgItems = [];
            if(this.orgsArea)this.orgsArea.hide();
        }
    },
    loadOrgTable_mobile: function (route) {
        var dataVisable = this.getVisableOrgConfig(route);
        this.setSize(dataVisable.length);

        this.orgsArea.show();

        var table_old = this.orgTableObject[route];
        var divsMap_old = {};
        if (table_old) {
            var divs = table_old.getChildren("div");
            divs.each(function (div) {
                divsMap_old[div.retrieve("orgName")] = div;
            });
        }

        var orgItems_old = this.orgItemsObject[route] || [];
        var orgItemMap_old = this.orgItemsMap[route] || {};

        this.orgItemsObject[route] = [];
        this.orgItemsMap[route] = {};

        this.orgItems = this.orgItemsObject[route];
        this.orgItemMap = this.orgItemsMap[route];

        var routeOrgTable = new Element("div", {
            "styles": this.css.routeOrgTable
        }).inject(this.orgsArea);
        this.orgTableObject[route] = routeOrgTable;

        var ignoreFirstOrgOldData = false

        dataVisable.each(function (config, i) {
            var sNode = new Element("div", {
                "styles": this.css.routeOrgTr
            }).inject(routeOrgTable);
            sNode.store("orgName", config.name);
            if (orgItemMap_old[config.name]) {
                var org = orgItemMap_old[config.name];
                this.orgItems.push(org);
                this.orgItemMap[config.name] = org;

                var div = divsMap_old[config.name];
                div.getChildren().inject(sNode);
            } else {
                this.loadOrg(sNode, config, ignoreFirstOrgOldData && i == 0)
            }
        }.bind(this));
        if (table_old) table_old.destroy();

    },
    loadOrg: function (container, json, position, ignoreOldData) {
        var titleNode = new Element("div.selectorTitle", {
            "styles": this.css.selectorTitle
        }).inject(container);
        var titleTextNode = new Element("div.selectorTitleText", {
            "text": json.title,
            "styles": this.css.selectorTitleText
        }).inject(titleNode);

        var contentNode = new Element("div.selectorContent", {
            "styles": this.css.selectorContent
        }).inject(container);

        var errorNode = new Element("div.selectorErrorNode", {
            "styles": this.css.selectorErrorNode
        }).inject(container);

        var org = new O2ProcessorMobile.Org(contentNode, this.form, json, this, {
            onSelect: function (items, data) {
                if (!data || !data.length) {
                    contentNode.setStyles(this.css.selectorContent_noItem);
                } else {
                    contentNode.setStyles(this.css.selectorContent);
                }
            }.bind(this)
        });
        org.ignoreOldData = ignoreOldData;
        org.errContainer = errorNode;
        org.summitDlalog = this;
        this.orgItems.push(org);

        titleNode.addEvent("click", function () {
            this.load();
        }.bind(org));
        contentNode.addEvent("click", function () {
            this.load();
        }.bind(org));

        var defaultValue = org.getValue();
        org.loadOrgWidget(defaultValue, contentNode);
        if (!defaultValue || defaultValue.length == 0) {
            contentNode.setStyles(this.css.selectorContent_noItem);
        }

    },
    showOrgsByRoute: function (route) {
        //debugger;
        this.loadOrgs(route);
    },
    isSameArray: function (arr1, arr2) {
        if (arr1.length !== arr2.length) return false;
        for (var i = 0; i < arr1.length; i++) {
            if (arr1[i] !== arr2[i]) return false;
        }
        return true;
    },
    validationOrgs: function () {
        if (!this.orgItems || !this.orgItems.length) return true;
        var flag = true;
        this.orgItems.each(function (item) {
            if (!item.validation()) flag = false;
        }.bind(this));
        return flag;
    },
    isOrgsHasEmpower: function () {
        if (!this.orgItems || !this.orgItems.length) return true;
        var flag = false;
        this.needCheckEmpowerOrg = [];
        this.orgItems.each(function (item) {
            if (item.hasEmpowerIdentity()) {
                this.needCheckEmpowerOrg.push(item);
                flag = true;
            }
        }.bind(this));
        return flag;
    },
    saveOrgs: function (keepSilent) {
        if (!this.orgItems || !this.orgItems.length) return true;
        var flag = true;
        this.orgItems.each(function (item) {
            if (!item.save(!keepSilent)) flag = false;
        }.bind(this));
        return flag;
    },
    saveOrgsWithCheckEmpower: function (callback) {
        debugger;
        if (!this.orgItems || !this.orgItems.length) {
            if (callback) callback();
            return true;
        }
        if (!this.validationOrgs()) return false;
        if (!this.isOrgsHasEmpower()) {
            if (callback) callback();
            return true;
        }
        //this.checkEmpowerMode = true;
        this.showEmpowerDlg(callback);
    },
    showEmpowerDlg: function (callback) {

        //this.needCheckEmpowerOrg.each( function(org){
        //    org.saveCheckedEmpowerData();
        //}.bind(this));

        var empowerNode = new Element("div.empowerNode", {"styles": this.css.empowerNode});
        var empowerTitleNode = new Element("div", {
            text: "下列人员对工作进行了授权，选择后文件将发送给被授权人，取消选择后文件将发送给授权者本人",
            styles: this.css.empowerTitleNode
        }).inject(empowerNode);

        var orgs = this.needCheckEmpowerOrg;
        var len = orgs.length;
        var lines = ((len + 1) / 2).toInt();

        var empowerTable = new Element("table", {
            "cellspacing": 0, "cellpadding": 0, "border": 0, "width": "100%",
            "styles": this.css.empowerTable
        }).inject(empowerNode);

        for (var n = 0; n < lines; n++) {
            var tr = new Element("tr").inject(empowerTable);
            new Element("td", {"width": "50%", "styles": this.css.empowerOddTd}).inject(tr);
            new Element("td", {"width": "50%", "styles": this.css.empowerEvenTd}).inject(tr);
        }

        var trs = empowerTable.getElements("tr");
        orgs.each(function (org, i) {
            var sNode;
            var width;
            if (i + 1 == len && (len % 2 === 1)) {
                sNode = trs[trs.length - 1].getFirst("td");
                sNode.set("colspan", 2);
                trs[trs.length - 1].getLast("td").destroy();
                width = "50%";
            } else {
                var row = ((i + 2) / 2).toInt();
                var tr = trs[row - 1];
                sNode = (i % 2 === 0) ? tr.getFirst("td") : tr.getLast("td");
            }

            var titleNode = new Element("div.empowerAreaTitle", {
                "styles": this.css.empowerAreaTitle
            }).inject(sNode);

            var titleTextNode = new Element("div.empowerAreaTitleText", {
                "text": org.json.title,
                "styles": this.css.empowerAreaTitleText
            }).inject(titleNode);

            var selectAllNode = new Element("div", {
                styles: {
                    float: "right"
                }
            }).inject(titleNode);

            var contentNode = new Element("div.empowerAreaContent", {
                "styles": this.css.empowerAreaContent
            }).inject(sNode);

            org.loadCheckEmpower(null, contentNode, selectAllNode);

        }.bind(this));

        empowerNode.setStyle("height", lines * this.options.orgHeight + 20);
        //var dlgHeight = Math.min( Math.floor( this.form.app.content.getSize().y * 0.9) , lines*this.options.orgHeight + 151 );

        //var width = this.node.retrieve("width");
        //empowerNode.setStyle( "width", width );
        var width = "880";
        //if( len > 1 ){
        //    width = "840"
        //}else{
        //    width = "420"
        //}
        empowerNode.setStyle("width", width + "px");

        this.node.getParent().mask({
            "style": this.css.mask
        });
        this.empowerDlg = o2.DL.open({
            "title": "授权人员替换选择",
            "style": this.form.json.dialogStyle || "user",
            "isResize": false,
            "content": empowerNode,
            //"container" : this.node,
            "width": width, //600,
            "height": "auto", //dlgHeight,
            "mark": false,
            "buttonList": [
                {
                    "type": "ok",
                    "text": "确定",
                    "action": function (d, e) {
                        //if (this.empowerDlg) this.empowerDlg.okButton.click();

                        orgs.each(function (org, i) {
                            org.saveCheckedEmpowerData(function () {
                                if (i === orgs.length - 1) {
                                    if (callback) callback();
                                    this.node.getParent().unmask();
                                    this.empowerDlg.close();
                                }
                            }.bind(this))
                        }.bind(this))
                    }.bind(this)
                },
                {
                    "type": "cancel",
                    "text": "取消",
                    "action": function () {
                        this.node.getParent().unmask();
                        this.empowerDlg.close();
                    }.bind(this)
                }
            ]
        });
    },
    getCss: function () {
        this.css = {

            "routeGroupNode": {
                "float": "left",
                "margin-left": "20px",
                "padding-left": "28px",
                "color": "#000",
                "background-color": "#E3E3E3",
                "min-height": "24px",
                "line-height": "24px",
                "margin-top": "8px",
                "cursor": "pointer",
                "background": "url(/x_component_process_Work/$Processor/process/route.png) no-repeat 5px center"
            },
            "routeGroupNode_over": {
                "background-color": "#E3E3E3",
                "background": "url(/x_component_process_Work/$Processor/process/route.png) no-repeat 5px center"
            },
            "routeGroupNode_selected": {
                "background-color": "#E3E3E3",
                "background": "url(/x_component_process_Work/$Processor/process/routegroup_selected.png) no-repeat 5px center"
            },

            "routeNode": {
                "float": "left",
                "margin-left": "20px",
                "border-radius": "5px",
                "min-height": "24px",
                "line-height": "24px",
                "margin-top": "8px",
                "padding-left": "26px",
                "padding-right": "8px",
                "color": "#000",
                "background": "url(/x_component_process_Work/$Processor/process/nocheck.png) no-repeat 5px center",
                "background-color": "#f0f0f0"
            },
            "routeNode_over": {
                "color": "#000",
                "background": "url(/x_component_process_Work/$Processor/process/nocheck.png) no-repeat 5px center",
                "background-color": "#e6ecf8"
            },
            "routeNode_selected": {
                "color": "#fff",
                "background": "url(/x_component_process_Work/$Processor/process/checked.png) no-repeat 5px center",
                "background-color": "#3296FA"
            },

            "selectIdeaItemNode": {
                "line-height": "18px",
                "font-size": "14px",
                "cursor": "pointer",
                "background-color": "#FFF",
                "padding": "4px 4px 4px 4px",
                "overflow": "hidden"
            },
            "selectIdeaItemNode_over": {
                "background-color": "#e6ecf8"
            },

            "handwritingNode": {
                "position": "absolute",
                "background": "#ffffff"
            },
            "handwritingActionNode": {
                "width": "70%",
                "min-width": "100px",
                "height": "3em",
                "line-height": "3em",
                "margin": "5px auto",
                "border-radius": "5px",
                "border": "1px solid #3296FA",
                "background-color": "#3296FA",
                "text-align": "center",
                "color": "#ffffff",
                "font-size": "16px"
            },

            "inputOpinionAudioRecordAction": {
                "display": "none",
                "float": "right",
                "border": "1px solid #6681a5",
                "border-radius": "3px",
                "cursor": "pointer",
                "padding-left": "24px",
                "padding-right": "5px",
                "margin-left": "5px",
                "background": "url(" + "/x_component_process_Work/$Processor/default/audioRecord.png) no-repeat 5px center"
            },

            "routeOrgTable": {},
            "routeOrgTr": {
                "margin-bottom": "10px"
            },
            "routeOrgOddTd": {
                "width": "50%"
            },
            "routeOrgEvenTd": {
                "width": "50%",
                "border-left": "5px solid #ffffff"
            },

            "selectorTitle": {
                "padding": "0px 4px",
                "height": "30px",
                "line-height": "30px",
                "font-size": "14px",
                //        "font-weight": "bold",
                "color": "#000",
                "cursor": "pointer",
                "background": "url(/x_component_process_Work/$Processor/mobile/arrow_right2.png) no-repeat right 10px center",
                "background-color": "#fff"
            },
            "selectorTitle_over": {
                "background-color": "#e6ecf8"
            },
            "selectorTitleText": {
//        "float": "left"
            },
            "selectorErrorNode": {
                //"float" : "right",
                "background-color": "#fff",
                "margin-right": "5px",
                "font-weight": "normal"
            },
            "selectorContent": {
                "overflow": "hidden",
                "background-color": "#fff",
                "padding": "0px 5px 5px 5px"
            },
            "selectorContent_noItem": {
                "padding": "0px"
            }
        }

    }
});


O2ProcessorMobile.Org = new Class({
    Implements: [Options, Events],
    options: {
        height : 240,
        moduleEvents : ["queryLoadSelector","postLoadSelector","postLoadContent","queryLoadCategory","postLoadCategory",
            "selectCategory", "unselectCategory","queryLoadItem","postLoadItem","selectItem", "unselectItem","change"]
    },
    initialize: function (container, form, json, processor, options) {
        this.form = form;
        this.json = json;
        this.processor = processor;
        this.container = $(container);
        this.orgAction = MWF.Actions.get("x_organization_assemble_control");
        this.setOptions(options);
    },
    load : function(){
        setTimeout( function(){ //如果有输入法界面，这个时候页面的计算不对，所以等100毫秒
            var options = this.getOptions();
            if(options){
                //this.selector = new MWF.O2Selector(this.container, options);
                this.selector = new MWF.O2Selector($(document.body), options);
            }
        }.bind(this), 100 )
    },
    clearTooltip: function(){
        if( this.selector && this.selector.selector && this.selector.selector.clearTooltip ){
            this.selector.selector.clearTooltip();
        }
    },
    _getOrgOptions: function(){
        this.selectTypeList = typeOf( this.json.selectType ) == "array" ? this.json.selectType : [this.json.selectType];
        if( this.selectTypeList.contains( "identity" ) ) {
            this.identityOptions = new O2ProcessorMobile.IdentityOptions(this.form, this.json);
        }
        if( this.selectTypeList.contains( "unit" ) ) {
            this.unitOptions = new O2ProcessorMobile.UnitOptions(this.form, this.json);
        }
        if( this.selectTypeList.contains( "group" ) ){
            this.groupOptions = new O2ProcessorMobile.GroupOptions( this.form, this.json );
        }
    },
    getOptions: function(){
        var _self = this;
        this._getOrgOptions();
        if( this.selectTypeList.length === 0 )return false;
        var exclude = [];
        if( this.json.exclude ){
            var v = this.form.Macro.exec(this.json.exclude.code, this);
            exclude = typeOf(v)==="array" ? v : [v];
        }

        var identityOpt;
        if( this.identityOptions ){
            identityOpt = this.identityOptions.getOptions();
            if (this.json.identityRange!=="all"){
                if ( !identityOpt.noUnit && (!identityOpt.units || !identityOpt.units.length) ){
                    this.form.notice("无法确定身份的选择范围", "error", this.node);
                    return false;
                }
            }
            if ( !identityOpt.noUnit && this.json.dutyRange && this.json.dutyRange!=="all"){
                if (!identityOpt.dutys || !identityOpt.dutys.length){
                    this.form.notice("无法确定职务的选择范围", "error", this.node);
                    return false;
                }
            }
            if( this.ignoreOldData ){
                identityOpt.values = this._computeValue() || [];
            }else{
                identityOpt.values = this.getValue() || [];
            }
            identityOpt.exclude = exclude;
        }

        var unitOpt;
        if( this.unitOptions ){
            unitOpt = this.unitOptions.getOptions();
            if (this.json.unitRange!=="all"){
                if ( !unitOpt.units || !unitOpt.units.length){
                    this.form.notice("无法确定组织的选择范围", "error", this.node);
                    return false;
                }
            }
            if( this.ignoreOldData ){
                unitOpt.values = this._computeValue() || [];
            }else{
                unitOpt.values = this.getValue();
            }
            unitOpt.exclude = exclude;
        }

        var groupOpt;
        if( this.groupOptions ){
            groupOpt = this.groupOptions.getOptions();
            if (this.ignoreOldData) {
                groupOpt.values = this._computeValue() || [];
            } else {
                groupOpt.values = this.getValue() || [];
            }
            groupOpt.exclude = exclude;
        }

        var defaultOpt = {
            "style" : "default",
            "zIndex" : 3000
        };

        if( this.json.events && typeOf(this.json.events) === "object" ){
            Object.each(this.json.events, function(e, key){
                if (e.code){
                    if (this.options.moduleEvents.indexOf(key)!==-1){
                        //this.addEvent(key, function(event){
                        //    return this.form.Macro.fire(e.code, this, event);
                        //}.bind(this));
                        if( key === "postLoadSelector" ) {
                            this.addEvent("loadSelector", function (selector) {
                                return this.form.Macro.fire(e.code, selector);
                            }.bind(this))
                        }else if( key === "queryLoadSelector"){
                            defaultOpt["onQueryLoad"] = function(target){
                                return this.form.Macro.fire(e.code, target);
                            }.bind(this)
                        }else{
                            defaultOpt["on"+key.capitalize()] = function(target){
                                return this.form.Macro.fire(e.code, target);
                            }.bind(this)
                        }
                    }
                }
            }.bind(this));
        }

        if( this.form.json.selectorStyle ){
            defaultOpt = Object.merge( Object.clone(this.form.json.selectorStyle), defaultOpt );
            if( this.form.json.selectorStyle.style )defaultOpt.style = this.form.json.selectorStyle.style;
        }

        var mobileEvents = {
            "onComplete": function(items){
                this.selectOnComplete(items);
            }.bind(this),
            "onCancel": this.selectOnCancel.bind(this),
            "onClose": this.selectOnClose.bind(this)
        };

        if( this.selectTypeList.length === 1 ){
            var opts =  Object.merge(
                defaultOpt,
                {
                    "type": this.selectTypeList[0],
                    "onLoad": function(){
                        //this 为 selector
                        _self.selectOnLoad(this, this.selector )
                    }
                    //"onComplete": function(items){
                    //    this.selectOnComplete(items);
                    //}.bind(this),
                    //"onCancel": this.selectOnCancel.bind(this),
                    //"onClose": this.selectOnClose.bind(this)
                },
                mobileEvents,
                identityOpt || unitOpt || groupOpt
            )
            return this.filterOptionValues( opts, this.selectTypeList[0] );
        }else if( this.selectTypeList.length > 1 ){
            var options = {
                "type" : "",
                "types" : this.selectTypeList,
                "onLoad": function(){
                    //this 为 selector
                    _self.selectOnLoad(this)
                }
                //"onComplete": function(items){
                //    this.selectOnComplete(items);
                //}.bind(this),
                //"onCancel": this.selectOnCancel.bind(this),
                //"onClose": this.selectOnClose.bind(this)
            };
            if( identityOpt ){
                options.identityOptions = Object.merge(
                    defaultOpt,
                    mobileEvents,
                    identityOpt
                );
            }
            if( unitOpt ){
                options.unitOptions = Object.merge(
                    defaultOpt,
                    mobileEvents,
                    unitOpt
                );
            }
            if( groupOpt ){
                options.groupOptions = Object.merge(
                    defaultOpt,
                    mobileEvents,
                    groupOpt
                );
            }
            return options;
        }
    },
    filterOptionValues: function( options, type ){
        var suffix;
        switch (type) {
            case "identity": suffix = "I"; break;
            case "unit": suffix = "U"; break;
            case "group": suffix = "G"; break;
        }
        options.values = (options.values || []).filter(function (v) {
            if( typeOf(v) === "string" ){
                if( v.contains("@") ){
                    return v.split("@").getLast().toUpperCase() === suffix;
                }else{
                    return true;
                }
            }else if( typeOf(v) === "object" ){
                if( v.distinguishedName ){
                    return v.distinguishedName.split("@").getLast().toUpperCase() === suffix;
                }else{
                    return false;
                }
            }
            return false;
        }.bind(this));
        return options;
    },
    selectOnComplete: function(items){ //移动端才执行
        var array = [];
        items.each(function(item){
            array.push(item.data);
        }.bind(this));

        this.checkEmpower( array, function( data ){
            var values = [];
            data.each(function(d){
                values.push(MWF.org.parseOrgData(d, true));
            }.bind(this));

            this.setData(values);

            //this.validationMode();
            //this.validation();

            this.container.empty();
            this.loadOrgWidget(values, this.container);

            this.selector = null;

            this.fireEvent("select", [items, values]);
        }.bind(this))
    },
    selectOnCancel: function(){ //移动端才执行
        //this.validation();
    },
    selectOnLoad: function( selector ){
        //if (this.descriptionNode) this.descriptionNode.setStyle("display", "none");
        this.fireEvent("loadSelector", [selector])
    },
    selectOnClose: function(){
        var v = this._getBusinessData();
        //if (!v || !v.length) if (this.descriptionNode)  this.descriptionNode.setStyle("display", "block");
    },
    loadOrgWidget: function(value, node){
        var height = node.getStyle("height").toInt();
        if (node.getStyle("overflow")==="visible" && !height) node.setStyle("overflow", "hidden");
        if (value && value.length){
            value.each(function(data){
                if( typeOf(data) === "string" ){
                    data = { distinguishedName : data, name : o2.name.cn(data) };
                }
                var flag = data.distinguishedName.substr(data.distinguishedName.length-1, 1);
                var copyData = Object.clone(data);
                if( this.json.displayTextScript && this.json.displayTextScript.code ){
                    this.currentData = copyData;
                    var displayName = this.form.Macro.exec(this.json.displayTextScript.code, this);
                    if( displayName ){
                        copyData.displayName = displayName;
                    }
                    this.currentData = null;
                }

                var widget;
                switch (flag.toLowerCase()){
                    case "i":
                        widget = new MWF.widget.O2Identity(copyData, node, {"style": "xform","lazy":true});
                        break;
                    case "p":
                        widget = new MWF.widget.O2Person(copyData, node, {"style": "xform","lazy":true});
                        break;
                    case "u":
                        widget = new MWF.widget.O2Unit(copyData, node, {"style": "xform","lazy":true});
                        break;
                    case "g":
                        widget = new MWF.widget.O2Group(copyData, node, {"style": "xform","lazy":true});
                        break;
                    default:
                        widget = new MWF.widget.O2Other(copyData, node, {"style": "xform","lazy":true});
                }
                widget.field = this;
            }.bind(this));
        }
    },

    hasEmpowerIdentity : function(){
        var data = this.getData();
        if(!this.empowerChecker )this.empowerChecker = new O2ProcessorMobile.EmpowerChecker(this.form, this.json, this.processor);
        return this.empowerChecker.hasEmpowerIdentity( data );
    },
    checkEmpower : function( data, callback, container, selectAllNode ){
        if( typeOf(data)==="array" && this.identityOptions && this.json.isCheckEmpower && this.json.identityResultType === "identity" ) {
            if(!this.empowerChecker )this.empowerChecker = new O2ProcessorMobile.EmpowerChecker(this.form, this.json, this.processor);
            this.empowerChecker.selectAllNode = selectAllNode;
            this.empowerChecker.load(data, callback, container);
        }else{
            if( callback )callback( data );
        }
    },

    loadCheckEmpower : function( callback, container, selectAllNode ){
        this.checkEmpower( this.getData(), callback, container, selectAllNode)
    },
    saveCheckedEmpowerData:function( callback ){
        var data = this.getData();
        //this.empowerChecker.replaceEmpowerIdentity(data, function( newData ){
        this.empowerChecker.setIgnoreEmpowerFlag(data, function( newData ){
            var values = [];
            newData.each(function(d){
                values.push(MWF.org.parseOrgData(d, true));
            }.bind(this));
            this.setData( values );
            if( callback )callback(values)
        }.bind(this))
    },

    save: function( isValid ){
        if( isValid ){
            if( this.validation() ){
                return true;
            }else{
                return false;
            }
        }else{
            this.setData( this.getData() );
            return true;
        }
    },

    resetSelectorData : function(){
        if( this.selector && this.selector.selector ){
            this.selector.selector.emptySelectedItems();
            this.selector.selector.options.values = this.getValue() || [];
            this.selector.selector.setSelectedItem();
        }
    },
    setDataToOriginal: function () {
        var v = this._computeValue();
        this.setData(v || "");
    },
    resetData: function(){
        var v = this.getValue() || [];
        //this.setData((v) ? v.join(", ") : "");
        this.setData(v);
    },
    getData: function(){
        if( this.selector && !layout.mobile ){
            return this.getSelectedData();
        }else{
            return this.getValue();
        }
    },
    getSelectedData : function(){
        return this.getValue();
    },
    getValue: function(){
        var value = this._getBusinessData();
        if (!value) value = this._computeValue();
        return value || "";
    },
    _computeValue: function(){
        var values = [];
        if (this.json.identityValue) {
            this.json.identityValue.each(function(v){ if (v) values.push(v)});
        }
        if (this.json.unitValue) {
            this.json.unitValue.each(function(v){ if (v) values.push(v)});
        }
        if (this.json.dutyValue) {
            var dutys = JSON.decode(this.json.dutyValue);
            var par;
            if (dutys.length){
                dutys.each(function(duty){
                    if (duty.code) par = this.form.Macro.exec(duty.code, this);
                    var code = "return this.org.getDuty(\""+duty.name+"\", \""+par+"\")";

                    var d = this.form.Macro.exec(code, this);
                    if (typeOf(d)!=="array") d = (d) ? [d.toString()] : [];
                    d.each(function(dd){if (dd) values.push(dd);});

                }.bind(this));
            }
        }
        if (this.json.defaultValue && this.json.defaultValue.code){
            var fd = this.form.Macro.exec(this.json.defaultValue.code, this);
            if (typeOf(fd)!=="array") fd = (fd) ? [fd] : [];
            fd.each(function(fdd){
                if (fdd){
                    if (typeOf(fdd)==="string"){
                        var data;
                        this.getOrgAction()[this.getValueMethod(fdd)](function(json){ data = json.data }.bind(this), null, fdd, false);
                        values.push(data);
                    }else{
                        values.push(fdd);
                    }
                }
            }.bind(this));
        }
        if (this.json.count>0){
            return values.slice(0, this.json.count);
        }
        return values;
        //return (this.json.defaultValue.code) ? this.form.Macro.exec(this.json.defaultValue.code, this): (value || "");
    },
    getOrgAction: function(){
        if (!this.orgAction) this.orgAction = MWF.Actions.get("x_organization_assemble_control");
        //if (!this.orgAction) this.orgAction = new MWF.xApplication.Selector.Actions.RestActions();
        return this.orgAction;
    },
    setData: function(value){

        if (!value) return false;
        var oldValues = this.getValue();
        var values = [];

        var type = typeOf(value);
        if (type==="array"){
            value.each(function(v){
                var vtype = typeOf(v);
                var data = null;
                if (vtype==="string"){
                    this.getOrgAction()[this.getValueMethod(v)](function(json){ data = MWF.org.parseOrgData(json.data, true); }.bind(this), null, v, false);
                }
                if (vtype==="object") {
                    data = MWF.org.parseOrgData(v, true);
                    if(data.woPerson)delete data.woPerson;
                }
                if (data)values.push(data);
            }.bind(this));
        }
        if (type==="string"){
            var vData;
            this.getOrgAction()[this.getValueMethod(value)](function(json){ vData = MWF.org.parseOrgData(json.data, true); }.bind(this), null, value, false);
            if (vData)values.push(vData);
        }
        if (type==="object"){
            var vData = MWF.org.parseOrgData(value, true);
            if(vData.woPerson)delete vData.woPerson;
            values.push( vData );
        }

        var change = false;
        if (oldValues.length && values.length){
            if (oldValues.length === values.length){
                for (var i=0; i<oldValues.length; i++){
                    if ((oldValues[i].distinguishedName!==values[i].distinguishedName) || (oldValues[i].name!==values[i].name) || (oldValues[i].unique!==values[i].unique)){
                        change = true;
                        break;
                    }
                }
            }else{
                change = true;
            }
        }else if (values.length || oldValues.length) {
            change = true;
        }
        this._setBusinessData(values);
        if (change) this.fireEvent("change");
    },

    getValueMethod: function(value){
        if (value){
            var flag = value.substr(value.length-1, 1);
            switch (flag.toLowerCase()){
                case "i":
                    return "getIdentity";
                case "p":
                    return "getPerson";
                case "u":
                    return "getUnit";
                case "g":
                    return "getGroup";
                default:
                    return (this.json.selectType==="unit") ? "getUnit" : "getIdentity";
            }
        }
        return (this.json.selectType==="unit") ? "getUnit" : "getIdentity";
    },

    _getBusinessData: function(){
        if (this.json.section=="yes"){
            return this._getBusinessSectionData();
        }else {
            if (this.json.type==="Opinion"){
                return this._getBusinessSectionDataByPerson();
            }else{
                return this.form.businessData.data[this.json.name] || "";
            }
        }
    },
    _getBusinessSectionData: function(){
        switch (this.json.sectionBy){
            case "person":
                return this._getBusinessSectionDataByPerson();
            case "unit":
                return this._getBusinessSectionDataByUnit();
            case "activity":
                return this._getBusinessSectionDataByActivity();
            case "splitValue":
                return this._getBusinessSectionDataBySplitValue();
            case "script":
                return this._getBusinessSectionDataByScript(this.json.sectionByScript.code);
            default:
                return this.form.businessData.data[this.json.name] || "";
        }
    },
    _getBusinessSectionDataByPerson: function(){
        this.form.sectionListObj[this.json.name] = layout.desktop.session.user.id;
        var dataObj = this.form.businessData.data[this.json.name];
        return (dataObj) ? (dataObj[layout.desktop.session.user.id] || "") : "";
    },
    _getBusinessSectionDataByUnit: function(){
        this.form.sectionListObj[this.json.name] = "";
        var key = (this.form.businessData.task) ? this.form.businessData.task.unit : "";
        if (key) this.form.sectionListObj[this.json.name] = key;
        var dataObj = this.form.businessData.data[this.json.name];
        if (!dataObj) return "";
        return (key) ? (dataObj[key] || "") : "";
    },
    _getBusinessSectionDataByActivity: function(){
        this.form.sectionListObj[this.json.name] = "";
        var key = (this.form.businessData.work) ? this.form.businessData.work.activity : "";
        if (key) this.form.sectionListObj[this.json.name] = key;
        var dataObj = this.form.businessData.data[this.json.name];
        if (!dataObj) return "";
        return (key) ? (dataObj[key] || "") : "";
    },
    _getBusinessSectionDataBySplitValue: function(){
        this.form.sectionListObj[this.json.name] = "";
        var key = (this.form.businessData.work) ? this.form.businessData.work.splitValue : "";
        if (key) this.form.sectionListObj[this.json.name] = key;
        var dataObj = this.form.businessData.data[this.json.name];
        if (!dataObj) return "";
        return (key) ? (dataObj[key] || "") : "";
    },
    _getBusinessSectionDataByScript: function(code){
        this.form.sectionListObj[this.json.name] = "";
        var dataObj = this.form.businessData.data[this.json.name];
        if (!dataObj) return "";
        var key = this.form.Macro.exec(code, this);
        if (key) this.form.sectionListObj[this.json.name] = key;
        return (key) ? (dataObj[key] || "") : "";
    },

    loadPathData: function(path){
        var data = null;
        this.form.workAction.getJobDataByPath(this.form.businessData.work.job, path, function(json){
            data = json.data ||  null;
        }, null, false);
        return data;
    },

    _setBusinessData: function(v){
        if (this.json.section=="yes"){
            // var d = this.loadPathData(this.json.name);
            // if (d) this.form.businessData.data[this.json.name] = d;
            this._setBusinessSectionData(v);
        }else {
            if (this.json.type==="Opinion"){
                // var d = this.loadPathData(this.json.name);
                // if (d) this.form.businessData.data[this.json.name] = d;
                this._setBusinessSectionDataByPerson(v);
            }else{
                if (this.form.businessData.data[this.json.name]){
                    this.form.businessData.data[this.json.name] = v;
                }else{
                    this.form.businessData.data[this.json.name] = v;
                    this.form.Macro.environment.setData(this.form.businessData.data);
                }
                if (this.json.isTitle) this.form.businessData.work.title = v;
            }
        }
    },
    _setBusinessSectionData: function(v){
        switch (this.json.sectionBy){
            case "person":
                this._setBusinessSectionDataByPerson(v);
                break;
            case "unit":
                this._setBusinessSectionDataByUnit(v);
                break;
            case "activity":
                this._setBusinessSectionDataByActivity(v);
                break;
            case "splitValue":
                this._setBusinessSectionDataBySplitValue(v);
                break;
            case "script":
                this._setBusinessSectionDataByScript(this.json.sectionByScript.code, v);
                break;
            default:
                if (this.form.businessData.data[this.json.name]){
                    this.form.businessData.data[this.json.name] = v;
                }else{
                    this.form.businessData.data[this.json.name] = v;
                    this.form.Macro.environment.setData(this.form.businessData.data);
                }
        }
    },
    _setBusinessSectionDataByPerson: function(v){
        var resetData = false;
        var key = layout.desktop.session.user.id;
        this.form.sectionListObj[this.json.name] = key;

        var dataObj = this.form.businessData.data[this.json.name];
        if (!dataObj){
            dataObj = {};
            this.form.businessData.data[this.json.name] = dataObj;
            resetData = true;
        }
        if (!dataObj[key]) resetData = true;
        dataObj[key] = v;

        if (resetData) this.form.Macro.environment.setData(this.form.businessData.data);
    },
    _setBusinessSectionDataByUnit: function(v){
        var resetData = false;
        var key = (this.form.businessData.task) ? this.form.businessData.task.unit : "";

        if (key){
            this.form.sectionListObj[this.json.name] = key;
            var dataObj = this.form.businessData.data[this.json.name];
            if (!dataObj){
                dataObj = {};
                this.form.businessData.data[this.json.name] = dataObj;
                resetData = true;
            }
            if (!dataObj[key]) resetData = true;
            dataObj[key] = v;
        }

        if (resetData) this.form.Macro.environment.setData(this.form.businessData.data);
    },
    _setBusinessSectionDataByActivity: function(v){
        var resetData = false;
        var key = (this.form.businessData.work) ? this.form.businessData.work.activity : "";

        if (key){
            this.form.sectionListObj[this.json.name] = key;
            var dataObj = this.form.businessData.data[this.json.name];
            if (!dataObj){
                dataObj = {};
                this.form.businessData.data[this.json.name] = dataObj;
                resetData = true;
            }
            if (!dataObj[key]) resetData = true;
            dataObj[key] = v;
        }

        if (resetData) this.form.Macro.environment.setData(this.form.businessData.data);
    },
    _setBusinessSectionDataBySplitValue: function(v){
        var resetData = false;
        var key = (this.form.businessData.work) ? this.form.businessData.work.splitValue : "";

        if (key){
            this.form.sectionListObj[this.json.name] = key;
            var dataObj = this.form.businessData.data[this.json.name];
            if (!dataObj){
                dataObj = {};
                this.form.businessData.data[this.json.name] = dataObj;
                resetData = true;
            }
            if (!dataObj[key]) resetData = true;
            dataObj[key] = v;
        }

        if (resetData) this.form.Macro.environment.setData(this.form.businessData.data);
    },
    _setBusinessSectionDataByScript: function(code, v){
        var resetData = false;
        var key = this.form.Macro.exec(code, this);

        if (key){
            this.form.sectionListObj[this.json.name] = key;
            var dataObj = this.form.businessData.data[this.json.name];
            if (!dataObj){
                dataObj = {};
                this.form.businessData.data[this.json.name] = dataObj;
                resetData = true;
            }
            if (!dataObj[key]) resetData = true;
            dataObj[key] = v;
        }

        if (resetData) this.form.Macro.environment.setData(this.form.businessData.data);
    },

    createErrorNode: function(text){
        var node;
        if( this.processor.css.errorContentNode ){
            node = new Element("div",{
                "styles" : this.processor.css.errorContentNode,
                "text": text
            });
            if( this.processor.css.errorCloseNode ){
                var closeNode = new Element("div",{
                    "styles" : this.processor.css.errorCloseNode ,
                    "events": {
                        "click" : function(){
                            this.destroy();
                        }.bind(node)
                    }
                }).inject(node);
            }
        }else {
            node = new Element("div");
            var iconNode = new Element("div", {
                "styles": {
                    "width": "20px",
                    "height": "20px",
                    "float": "left",
                    "background": "url(" + "/x_component_process_Xform/$Form/default/icon/error.png) center center no-repeat"
                }
            }).inject(node);
            var textNode = new Element("div", {
                "styles": {
                    "height": "20px",
                    "line-height": "20px",
                    "margin-left": "20px",
                    "color": "red",
                    "word-break": "keep-all"
                },
                "text": text
            }).inject(node);
        }
        return node;
    },
    notValidationMode: function(text){
        if (!this.isNotValidationMode){
            //this.isNotValidationMode = true;
            //this.node.store("borderStyle", this.node.getStyles("border-left", "border-right", "border-top", "border-bottom"));
            //this.node.setStyle("border-color", "red");

            this.errNode = this.createErrorNode(text);
            if( this.errContainer ){
                this.errContainer.empty();
                this.errNode.inject(this.errContainer);
            }else{
                this.errNode.inject(this.container, "after");
            }
            //this.showNotValidationMode(this.node);
            //if (!this.node.isIntoView()) this.node.scrollIntoView();
        }
    },
    validation: function(){
        var data = this.getData();
        this.setData( data );
        var flag=true;
        if( this.json.validationCount && typeOf( this.json.validationCount.toInt() ) === "number" ){
            if( data.length < this.json.validationCount.toInt() ){
                //if( this.json.validationCount.toInt() === 1 ){
                //    flag = "请选择"
                //}else{
                //    flag = "请至少选择"+this.json.validationCount+"项"
                //}
                flag = "请至少选择"+this.json.validationCount+"项"
            }
        }

        if( flag === true ){
            if ( this.json.validation && this.json.validation.code){
                flag = this.form.Macro.exec(this.json.validation.code, this);
                if (!flag) flag = "数据校验未通过";
            }
        }

        if (flag.toString()!="true"){
            this.notValidationMode(flag);
            return false;
        }else if(this.errNode){
            this.errNode.destroy()
        }
        return true;
    }
});

O2ProcessorMobile.EmpowerChecker = new Class({
    Extends : MWF.APPOrg.EmpowerChecker,
    initialize: function (form, json, processor) {
        this.form = form;
        this.json = json;
        this.processor = processor;
        this.css = this.processor.css;
        this.checkedAllItems = true;
    },
    hasEmpowerIdentity: function( data ){
        var flag = false;
        if( typeOf(data)==="array" && this.json.isCheckEmpower && this.json.identityResultType === "identity" ) {
            var array = [];
            data.each(function (d) {
                if (d.distinguishedName) {
                    var flag = d.distinguishedName.substr(d.distinguishedName.length - 1, 1).toLowerCase();
                    if (flag === "i")array.push(d.distinguishedName)
                }
            }.bind(this));
            if (array.length > 0) {
                o2.Actions.get("x_organization_assemble_express").listEmpowerWithIdentity({
                    "application": (this.form.businessData.work || this.form.businessData.workCompleted).application,
                    "process": (this.form.businessData.work || this.form.businessData.workCompleted).process,
                    "work" : (this.form.businessData.work || this.form.businessData.workCompleted).id,
                    "identityList": array
                }, function (json) {
                    var arr = [];
                    json.data.each(function (d) {
                        if (d.fromIdentity !== d.toIdentity)
                            arr.push(d);
                    });
                    if (arr.length > 0) {
                        flag = true;
                    }
                }.bind(this), null, false)
            }
        }
        return flag;
    },
    getSelectedData : function( callback ){
        var json = {};
        this.empowerSelectNodes.each(function(node){
            if( node.retrieve("isSelected") ){
                var d = node.retrieve("data");
                json[ d.fromIdentity ] = d;
            }
        }.bind(this));
        if( callback )callback( json );
    }
});

O2ProcessorMobile.UnitOptions = new Class({
    Extends : MWF.APPOrg.UnitOptions
});

O2ProcessorMobile.IdentityOptions = new Class({
    Extends : MWF.APPOrg.IdentityOptions
});

O2ProcessorMobile.GroupOptions = new Class({
    Extends: MWF.APPOrg.GroupOptions
});